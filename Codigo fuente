
import time
import random
#TABLERO
Casillas_Tab=68
Casillas_Lle=8
Llegada=4
Colores={"Rojas","Amarillas","Verdes","Azules"}
Salidas={"Rojas":4,"Amarilas":21,"Verdes":38,"Azules":55}
seguros={"Rojas":[4,11],"Amarilas":[21,28],"Verdes":[38,45],"Azules":[55,62]}
Celdas_seg=set([4,11,21,28,38,45,55,62]) #  SET crea una estructura de datos optimizada para comprobar rápidamente si una celda específica es una "celda segura" sin tener que recorrer toda la lista cada vez. Es ideal para situaciones donde necesitas saber si un elemento "está o no está" en una colección de forma eficiente.
Seg_llegada={"Rojas":67,"Amarilas":16,"Verdes":33,"Azules":50}
yes_or_no=input("inserte y/n")
def modo_real(yes_or_no):  
      if yes_or_no=='y':
        modo_real == True
      elif yes_or_no=='n':
        modo_real == False

#ELEMENTOS INDEPENDIENTES
class Ficha:
  def __init__(self,equipo,id):
    self.equipo=equipo # Identifica el color del equipo al que pertenece la ficha
    self.id=id # Otorga un identificador del 0 al 3
    self.zona="Carcel" # Zona actual donde se ubica la ficha (carcel, externo, interno y casa), todas la fichas inician en la carcel.
    self.posicion=None # Número de casilla/posición (externo número de casilla, interno indice dentro del pasillo o None si se encuentra en la carcel o meta)
  def __repr__(self): # Define como será representado el elemento
    return f"{self.equipo[0].upper()}{self.id}" # Devuelve una cadena de texto como "A0", "V1", "R2", etc., donde la primera letra es la inicial del color del equipo en mayúscula y el número es el id de la ficha.
class Equipo:
  def __init__(self,color):
    self.color=color # Guarda el color del equipo
    self.fichas=[Ficha(color,i) for i in range(Llegada)] # Crea una lista de elementos con las fichas de cada equipo
    self.internas=[None]*Casillas_Lle # Pasillo interno
    self.meta=[] # Lista que contiene las fichas que han llegado a la meta
  def fichas_en_carcel(self): # Retorna una lista con las fichas que se encuentran en la carcel
   return[i for i in self.fichas if i.zona=="Carcel"]
  def fichas_en_juego(self): # Retorna una lista con todas las fichas que se encuentran en el tablero principal
    return[i for i in self.fichas if i.zona=="Externa"]
  def fichas_en_internas(self): # Retorna una lista con todas las fichas que se encuentran en el pasillo interno
    return[i for i in self.fichas if i.zona=="Interna"]
  def fichas_en_meta(self): # Retorna una lista con todas las fichas que se encuentran en la meta (culminaron el recorrido)
    return len(self.meta)==Llegada
  def fichas_movibles(self): # Combina las listas para devolver todas las fichas del equipo que pueden ser movidas en el turno actual
    return self.fichas_en_juego()+self.fichas_en_internas()
  def fichas_llegada(self): # Comprueba si todas las fichas del equipo han llegado a la meta. Devuelve True si el número de fichas en self.meta es igual a Llegada, indicando que el equipo ha ganado.
    return len(self.meta)==Llegada
  def __repr__(self): # Define como sera representado el elemento
    return f"Equipo{self.color}"
class Tablero:
  def __init__(self):
    self.casillas={i: [] for i in range (1,Casillas_Tab+1)} # Crea un diccionario para representar las castillas del tablero. Cada clave del diccionario en un número de casilla, El valor asociado a cada clave es una lista vacia que eventualmente contendra fichas.
  def es_casilla_disponible (self,casilla): # Comprueba si la casilla puede albergar una casilla más
    return len(self.casillas[casilla])<2
  def añadir_ficha(self,casilla,ficha):  # Añade si es posible la ficha a la casilla o en caso contrario imprime un mensaje de error.
    if self.es_casilla_disponible(casilla):
      self.casillas[casilla].append(ficha)
    else:
      raise Exception (f"La casilla {casilla} ya tiene dos fichas")
  def remover_ficha(self,casilla,ficha): # Elimina una ficha especifica de la casilla
    if ficha in self.casillas[casilla]:
      self.casillas[casilla].remove(ficha)
  def retornar_fichas(self,casilla): # Retorna la lista con todas las fichas que se encuentran en la casilla
    return self.casillas[casilla]
  def mover_ficha(self,form_casilla,to_casilla,ficha): # Realiza el movimiento de la ficha de una casilla a otra (Remueve la ficha de su posición originar y la envia a una nueva casilla)
    if ficha in self.casillas[form_casilla]:
      self.remover_ficha(form_casilla,ficha)
      self.añadir_ficha(to_casilla,ficha)
  def __repr__(self): # Define como se representa un objeto.
    tablero_str= ""
    for i in range (1,Casillas_Tab+1): #Itera sobre las casillas del tablero. Si una casilla contiene fichas, añade su número y la representación de las fichas a una cadena de texto
      if self.casillas[i]:
        tablero_str+=f"{i}:{self.casillas[i]}"
    return tablero_str
# LOGICA DE JUEGO
class Juego:
  def __init__(self, orden_turno):
    self.orden_turno=[] # Crea una lista que determina el orden de juego de los equipos
    referencia={"R":"Rojas","A":"Amarillas","V":"Verdes","A":"Azules"} # Cada letra de la cadena la convierte a su color/equipo en referencia
    for i in orden_turno.upper(): # Crea la secuencia de turnos
      if i in referencia:
        self.orden_turno.append(referencia[i])
    for color in Colores: # Asegura que todos los esquipos se encuentren en la secuencia
      if color not in self.orden_turno:
        self.orden_turno.append(color)
    self.equipos={color:Equipo(color) for color in Colores} # Crea un diccionario para los equipos y sus fichas
    self.tablero=Tablero() # Crea el tablero de juego
    self.indice_turno=0 # Controla el equipo en juego
    self.movimientos_adicionales={} # Guarda movimientos extra
    self.conteo_pares={color:0 for color in Colores}
  def tirar_dados(self):
    if yes_or_no=='y':
        d1 = random.randint(1, 6)
        d2 = random.randint(1, 6)
        print(f"DADOS: {d1} y {d2}")
        return d1, d2
    elif yes_or_no=='n':
        d1 = int(input("Introduce el primer dado: "))
        d2 = int(input("Introduce el segundo dado: "))
        return d1, d2

  def iniciar_partida(self, color_equipo):  # Solicita al usuario que ingrese el comando o de contrario perderá el turno
    print(f"\nTurno de {color_equipo.upper()}")
    if yes_or_no=='y':
        incio_tiro = input("Escribe 'GO' para iniciar lanzar los dados: ").strip().upper()
        if incio_tiro == "GO":
            return self.tirar_dados()
        else:
            print("Comando incorrecto. Se omite el lanzamiento de dados.")
            return None
    else:
        d1 = int(input("Introduce el primer dado: "))
        d2 = int(input("Introduce el segundo dado: "))
        return self.tirar_dados(d1,d2)
  
  def salir_de_carcel(self,nums): # Retorna True si alguno de los dados fue un 5.Así una de las fichas del equipo podra salir de cárcel
    return 5 in nums
  def sacar_ficha_de_carcel(self,equipo):
    if not equipo.fichas_en_carcel(): # Verifica si hay fichas en la carcel
      return None
    salida=Salidas[equipo.color] # Verifica si la casilla de salida del equipo esta disponible
    if not self.tablero.es_casilla_disponible(salida):
      print(f"La salida ({salida}) del equipo {equipo.color} no esta disponible")
      return None
    ficha=equipo.fichas_en_carcel()[0] # Cambia el estado de la ficha, ubicandola en el la casilla de salida correspondiente
    ficha.zona="Externa"
    ficha.posicion=salida
    self.tablero.añadir_ficha(salida,ficha)
    print(f"La ficha {ficha} ha salido de la carcel a la casilla {salida}.")
    return ficha
  def mover_ficha_externa(self,equipo,ficha,pasos):
    pos_inicial=ficha.posicion
    pos_nueva=pos_inicial+pasos # Calcula la nuvea posicion de la ficha tra el movimiento
    if pos_nueva>Casillas_Tab: # Verifica si la ficha cruza a la pista interna de su equipo
      pos_nueva=pos_nueva-Casillas_Tab
    seguro_llegada=Seg_llegada[equipo.color]
    if self.pasa_seguro(pos_inicial,pos_nueva,seguro_llegada,pasos):
      pasos_internos=pos_nueva-seguro_llegada if pos_nueva>seguro_llegada else (pasos-(Casillas_Tab-pos_inicial+seguro_llegada))
      if pasos_internos<Casillas_Lle:
        ficha.zona="Interna"
        ficha.posicion=pasos_internos
        self.tablero.remover_ficha(pos_inicial,ficha)
        print(f"La ficha {ficha} ingresa a las casillas internas en la posición {pasos_internos}.")
      elif pasos_internos==Casillas_Lle-1: # Si la ficha alcanza la meta con un número exacto de movimientos está saldra de juego
        ficha.zona="Meta"
        ficha.posicion=None
        self.tablero.remover_ficha(pos_inicial,ficha)
        equipo.meta.append(ficha)
        print(f"La ficha {ficha} de equipo {equipo.color} ha llegado a la meta.")
        self.agregar_bonus(equipo.color,10) # Otorga los movimientos bonus al equipo
      else:
        print("El movimiento excede las casillas de la pista interna. Se omite el movimiento.") # En caso de que el lanzamiento exceda el número de casillas internas restantes, se omite el movimiento
        return False
    else:
      if not self.tablero.es_casilla_disponible(pos_nueva): # Verifica que la casilla de la nueva posicion este disponible
        print(f"La casilla {pos_nueva} esta ocupada. Se omite el movimiento de la ficha {ficha}.")
        return False
      ficha_destino=self.tablero.retornar_fichas(pos_nueva)
      if ficha_destino:
        if all(i.equipo==equipo.color for i in ficha_destino):
          print(f"La casilla {pos_nueva} tiene un bloque propio. No es posible efectuar el movimiento de {ficha}")
          return False
        else:
          if pos_nueva in Celdas_seg:
            print(f"La casilla {pos_nueva} es segura, no es posible capcturar. Por lo tanto se omite el movimiento.")
            return False
          else:
            for i in ficha_destino.copy(): # Si hay fichas enemigas en una casilla no segura, la captura y le otorga el bonus
              if i.equipo!=equipo.color:
                self.capturar_ficha(i)
                print(f"La ficha {ficha} captura a la ficha {i} en la casilla {pos_nueva}")
                self.agregar_bonus(equipo.color,20)
      self.tablero.remover_ficha(pos_inicial,ficha)
      self.tablero.añadir_ficha(pos_nueva,ficha) # Si no hay alguna restricción o particularidad efectua el movimiento
      ficha.posicion=pos_nueva
      print(f"La ficha {ficha} se mueve de la casilla {pos_inicial} a la casilla {pos_nueva}.")
    return True
  def mover_ficha_interna(self,equipo,ficha,pasos): # Mueve las fichas dentro de la pista interna
    pos_inicial=ficha.posicion
    pos_nueva=pos_inicial+pasos
    if pos_nueva<Casillas_Lle: # Si llega a la meta con un número exacto de movimetos la ficha sale del juego. En caso contrario omite el movimiento.
      ficha.position=pos_nueva
      print(f"La ficha {ficha} ingresa a la casilla {pos_nueva} del pasillo interno.")
    elif pos_nueva==Casillas_Lle-1:
      ficha.zona="Meta"
      ficha.posicion=None
      equipo.meta.append(ficha)
      print(f"La ficha {ficha} de equipo {equipo.color} ha llegado a la meta.")
      self.agregar_bonus(equipo.color,10)
    else:
      print("El movimiento excede las casillas del pasillo interno. Se omite el movimiento.")
      return False
    return True
  def pasa_seguro(self,pos_inicial,pos_nueva,seguro_llegada,pasos): # Determina si el movimiento ingresa la ficha a su pista interna
    if pos_inicial<=pos_nueva:
      return pos_inicial<seguro_llegada<=pos_nueva
    else:
      return pos_inicial<seguro_llegada+Casillas_Tab or seguro_llegada<=pos_nueva
  def capturar_ficha(self,ficha): # Cambia el estado de la ficha capturada, enviandola a la carcel del equipo
    equipo=self.equipos[ficha.equipo]
    if ficha.zona=="Externa":
      self.tablero.remover_ficha(ficha.posicion,ficha)
    ficha.zona="Carcel"
    ficha.posicion=None
    print(f"La ficha {ficha} ha sido capturada y regresa a la carcel del equipo {ficha.equipo}.")
  def agregar_bonus(self,equipo_color,movimientos): # Guarda movimientos bonus acumulados por el equipo
    if equipo_color in self.movimientos_adicionales:
      self.movimientos_adicionales[equipo_color]+=movimientos
    else:
      self.movimientos_adicionales[equipo_color]=movimientos
    print(f"Se le otrogan {movimientos} movimientos adicionales al equipo {equipo_color}")
  def aplicar_bonus(self,equipo): # Permite el uso de los movimientos adicionales otorgados
    if self.movimientos_adicionales.get(equipo.color,0)>0:
      print(f"El equipo {equipo.color} tiene {self.movimientos_adicionales[equipo.color]} movimientos extra.")
      while self.movimientos_adicionales[equipo.color]>0:
        print(f"Movimientos adicionales disponibles: {self.movimientos_adicionales[equipo.color]}")
        movibles=equipo.fichas_movibles()
        if not movibles:
          print("No hay movimientos posibles, se omite el turno.")
          break
        print("Fichas disponibles para los movimientos adicionales:",movibles) # Le muestra al usuario las fichas disponibles
        try:
          ficha_id=int(input("Seleccione el id de la ficha que desea mover:")) # Le permite al usuario seleccionar la ficha y el número de pasos que desea mover
        except:
          print("Entrada inválida. Se omite el turno.")
          break
        ficha=next((i for i in movibles if i.id==ficha_id),None)
        if ficha is None:
          print("Ficha no encontrada. Se omite el turno y continua la partida.")
          continue
        try:
          pasos=int(input("Ingrese la cantidad de pasos que desea mover (1 o más):"))
        except:
          print("Entrada inválida. Se omite el turno y continua la partida")
          continue
        if pasos>self.movimientos_adicionales[equipo.color]:
          print("Los pasos ingresados exceden los movimientos adicionales disponibles. Se omite el turno y continua la partida.")
          continue
        if ficha.zona=="Externa":
          if self.mover_ficha_externa(equipo,ficha,pasos):
            self.movimientos_adicionales[equipo.color]-=pasos
        elif ficha.zona=="Interna":
          if self.mover_ficha_interna(equipo,ficha,pasos):
            self.movimientos_adicionales[equipo.color]-=pasos
        else:
          print("No es posible efectuar el movimiento. Se omite el turno y continua la partida.")
    if self.movimientos_adicionales.get(equipo.color,0)==0: # Termina el proceso cuando no hayan movimientos adicionales disponibles
      del self.movimientos_adicionales[equipo.color]
  def turno(self): # Controla los turnos de los equipos
    equipo_actual=self.equipos[self.orden_turno[self.indice_turno]]
    if self.movimientos_adicionales.get(equipo_actual.color,0)>0:
      self.aplicar_bonus(equipo_actual) # Aplica (si se tienen) movimientos adicionales
    dados=self.iniciar_partida(equipo_actual.color) # Inicia el lanzamiento de los dados
    if dados is None:
      self.siguiente_turno()
      return
    d1,d2=dados
    total=d1+d2
    if d1==d2:
      self.conteo_pares[equipo_actual.color]+=1 # Si se obtienen dados pares se otorga un turno adicional
      turno_extra=True
      print("!Dados dobles¡ Obtienes un turno extra.")
    else:
      self.conteo_pares[equipo_actual.color]=0
      turno_extra=False
    if self.conteo_pares[equipo_actual.color]==3: # Si se obtienen 3 dados dobles seguidos, se penaliza enviando la ultima ficha movida a la carcel.
      movibles=equipo_actual.fichas_movibles()
      if movibles:
        castigo_ficha=movibles[-1]
        print(f"Tres dobles consecutivos.La ficha {castigo_ficha} es enviada a la cárcel.")
        self.capturar_ficha(castigo_ficha)
      self.conteo_pares[equipo_actual.color]=0
      self.siguiente_turno()
      return
    if (len(equipo_actual.fichas_en_carcel())==Casillas_Tab and not self.salir_de_carcel((d1,d2))) or (not equipo_actual.fichas_movibles() and not self.salir_de_carcel((d1,d2))): # Si no es posible efectuar ningún movimiento se omite el turno
      print(f"No hay movimientos posibles para el equipo {equipo_actual.color}. Se omite el turno.")
      self.siguiente_turno(turno_extra)
      return
    if self.salir_de_carcel((d1,d2)) and equipo_actual.fichas_en_carcel(): # Si el equipo tiene fichas en la carcel y obtiene un 5 en el lanzamiento de los dados, Saca la ficha
        self.sacar_ficha_de_carcel(equipo_actual)
        otro_valor=d2 if d1==5 else d1
        mover=input(f"¿Desea mover alguna ficha {otro_valor} casillas? (si/no):").strip().lower() # Permite la elección de las fichas que desea mover
        if mover=="si":
          self.seleccionar_y_mover_ficha(equipo_actual,otro_valor)
        self.siguiente_turno(turno_extra)
        return
    self.seleccionar_y_mover_ficha(equipo_actual,total)
    self.siguiente_turno(turno_extra) # Llama el siguiente turno
  def seleccionar_y_mover_ficha(self,equipo,pasos): # Permite al usuario seleccionar y mover una ficha
    movibles=equipo.fichas_movibles()
    if not movibles:
      print("No hay movimientos posibles.")
      return
    print("Fichas movibles:",movibles) # Muestra las fichas disponibles para mover
    try:
      ficha_id=int(input("Seleccione el id de la ficha que desea mover:")) # Solicita al ususario selccionar la ficha a mover por medio del id
    except:
      print("Entrada inválida. Se omite el turno.")
      return
    ficha=next((i for i in movibles if i.id==ficha_id),None)
    if ficha is None:
      print("Ficha no encontrada. Se omite el turno.")
      return
    if ficha.zona=="Externa":
      self.mover_ficha_externa(equipo,ficha,pasos) # Llama la función de movimiento según la zona en la que se encuentre la ficha
    elif ficha.zona=="Interna":
      self.mover_ficha_interna(equipo,ficha,pasos)
  def siguiente_turno(self,turno_extra=False): # Avanza al turno al siguiente equipo, salvo si hay un turno extra
    if not turno_extra:
      self.indice_turno=(self.indice_turno+1)%len(self.orden_turno)
  def juego_terminado(self): # Verificar si algún equipo tiene todas sus fichas en la meta. Siendo así el juego ha terminado
    for color,equipo in self.equipos.items():
      if equipo.fichas_llegada():
        print(f"\n¡Felicidades!El equipo {color.upper()} ha ganada.")
        return True
    return False
  def estado_tablero(self): # Muestra la información actual del tablero y sus elementos
    print("\nEstado del tablero:")
    print(self.tablero)
    for color,equipo in self.equipos.items():
      print(f"\nEquipo:{color.upper()}-Carcel:{equipo.fichas_en_carcel()}-En tablero:{equipo.fichas_en_juego()}-Pista interna:{equipo.fichas_en_internas()}-Meta:{equipo.fichas_en_meta()}")
  def iniciar(self): # Ejecucta el bucle principal del juego. Mostrando es estado del tablero, ejecución de turnos y muestra el mensaje de vicotria
    print("¡Bienvenido al juego de Parchis!")
    print("Lo invitamos a conocer las instrucciones de juego antes de comenzar la partida. Estas se encuentran en el archivo README.")
    while not self.juego_terminado():
      self.turno()
      self.estado_tablero()
      time.sleep(0.1) # Añade un pequeño retardo en la impresión
    print("La partida a terminado ¡Gracias por jugar!")
if __name__ == "__main__":
    juego = Juego("RAVA") # Inicia la clase de juego
    juego.iniciar() # Llama el método para iniciar al instancia
